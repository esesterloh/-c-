#include <graphics.h>
#include <time.h>
#include <Windows.h>
#include <stdio.h>

int map[5][8];
void initGraph()
{
	for (int i= 0; i < 5; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			map[i][j] = rand() % 3 + 1;
		}
	}
}

void drawGraph()
{
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			setlinestyle(PS_SOLID, 3);
			setlinecolor(WHITE);
			
			int x = 100 * j;
			int y = 25 * i;
			switch (map[i][j])
			{
			case 1:
				setfillcolor(CYAN);
				fillrectangle(x, y, x + 100, y + 25);
				break;
			case 2:
				setfillcolor(RGB(255, 192, 203));
				fillrectangle(x, y, x + 100, y + 25);
				break;
			case 3:
				setfillcolor(YELLOW);
				fillrectangle(x, y, x + 100, y + 25);
				break;
			case 0:				//0=消除
				printf("fu");
				break;
			}
		}
	}
}

struct Ball
{
	int x;					//圆心坐标
	int y;
	int r;					//3.14(
	COLORREF color;
	int dx;
	int dy;
	


};

struct Board
{
	int x;								//左上角
	int y;
	int width;						//宽高
	int height;
	COLORREF	 color;			//颜色
	int speed;						//移动速度
};

struct Board* createBoard(int x, int y, int width, int height, COLORREF color, int speed)
{
	struct Board* pB = (struct Board*)malloc(sizeof(struct Board));
	pB->x = x;
	pB->y = y;
	pB->width = width;
	pB->height = height;
	pB->color = color;
	pB->speed = speed;
	return pB;
};

void drawBoard(struct Board* pB)
{
	setfillcolor(pB->color);
	solidrectangle(pB->x, pB->y, pB->x + pB->width, pB->y + pB->height);
	
}

int Timer(time_t num, int id)
{
	static time_t start[10];
	time_t end = clock();
	if (end - start[id] > num)
	{
		start[id] = end;
		return 1;
	}
	return 0;

}


void keyDown(struct Board* pB)
{
	if (GetAsyncKeyState('A')||GetAsyncKeyState(VK_LEFT)&&Timer(20,0))
	{
		pB-> x -= pB->speed;
	}
	if (GetAsyncKeyState('D') || GetAsyncKeyState(VK_RIGHT)&&Timer(20,1))
	{
		pB->x += pB->speed;
	}
}

struct Ball* createBall(int x, int y, int r, COLORREF color, int dx, int dy)
{
	struct Ball* pBall = (struct Ball*)malloc(sizeof(struct Ball));
	pBall->x = x;
	pBall->y = y;
	pBall->r = r;
	pBall->color = color;
	pBall->dx = dx;
	pBall->dy = dy;
	return pBall;
}

void drawBall(struct Ball* pBall)
{
	setfillcolor(pBall->color);
	solidcircle(pBall->x, pBall->y, pBall->r);
}

int hitBoard(struct Ball* pBall, struct Board* pBoard)
{
	if (pBall-> y+ pBall->r == pBoard->y)
	{
		if (pBall->x >= pBoard->x && pBall->x <= pBoard->x + pBoard->width)
		{
			return 1;
		}
	}
	return 0;
}

int hitBricks(struct Ball* pBall)
{
	int ballRow = (pBall->y - pBall->r) / 25;
	int ballCols = pBall->x / 100;
	if (ballRow < 5 && ballCols < 8 && map[ballRow][ballCols] != 0)
	{
		map[ballRow][ballCols] = 0;
		return 1;
	}
	return 0;
}

void moveBall(struct Ball* pBall,struct Board* pBoard)
{
	if (pBall->x - pBall->r <= 0 || pBall->x + pBall->r >= 800)
	{
	pBall->dx = -pBall->dx;
	}
	if (pBall->y - pBall->r <= 0 || hitBoard(pBall,pBoard)||hitBricks(pBall))
	{
	pBall->dy = -pBall->dy;
	}

	pBall->x += pBall->dx;
	pBall->y += pBall->dy;
}




int main()
{
	srand((unsigned int)time(0));
	initGraph();
	initgraph(8 * 100, 800);
	struct Board* pB = createBoard(300, 800-100, 200, 25, WHITE, 20);
	struct Ball* pBall = createBall(400, 400, 15, RED, 5, -5);
	BeginBatchDraw();
	while (1)
	{
		cleardevice();
		drawGraph();
		drawBoard(pB);
		keyDown(pB);
		drawBall(pBall);
		if (Timer(10, 3))
			moveBall(pBall,pB);
		FlushBatchDraw();
		
	}
	MessageBoxA(0, "通关！！", "来自作者", 0);
	closegraph();
	return 0;
}
